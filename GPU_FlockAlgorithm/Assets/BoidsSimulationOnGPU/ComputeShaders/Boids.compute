// Boids의 시뮬레이션을 실행하는 ComputeShader

// カーネル関数を指定 커널 함수 지정
#pragma kernel ForceCS      // 操舵力を計算 조향력 계산
#pragma kernel IntegrateCS  // 速度, 位置を計算 속도, 위치 계산

// Boidデータの構造体
struct BoidData
{
	float3 velocity; // 速度 속도
	float3 position; // 位置 위치
};

// スレッドグループのスレッドのサイズ
// 스레드 그룹 크기
#define SIMULATION_BLOCK_SIZE 256

// Boidデータのバッファ（読み取り用）Boid 데이터 버퍼 (읽기용)
StructuredBuffer<BoidData>   _BoidDataBufferRead;
// Boidデータのバッファ（読み取り, 書き込み用） Boid 데이터 버퍼 (읽기, 쓰기용)
RWStructuredBuffer<BoidData> _BoidDataBufferWrite;
// Boidの操舵力のバッファ（読み取り用） Boid 조향력 버퍼 (읽기용)
StructuredBuffer<float3>     _BoidForceBufferRead;
// Boidの操舵力のバッファ（読み取り, 書き込み用） Boid 조향력 버퍼 (읽기, 쓰기용)
RWStructuredBuffer<float3>   _BoidForceBufferWrite;

int _MaxBoidObjectNum; // Boidオブジェクト数 Boid 개체 수

float _DeltaTime; // 前フレームから経過した時間 이전 프레임에서 경과한 시간

float _SeparateNeighborhoodRadius;  // 分離を適用する他の個体との距離 회피 거리
float _AlignmentNeighborhoodRadius; // 整列を適用する他の個体との距離 정렬 거리
float _CohesionNeighborhoodRadius;  // 結合を適用する他の個体との距離 응집 거리

float _MaxSpeed;        // 速度の最大値 속도 최대 값
float _MaxSteerForce;   // 操舵する力の最大値 조향 능력의 최대치

float _SeparateWeight;  // 分離適用時の重み 분리 가중치
float _AlignmentWeight; // 整列適用時の重み 병렬 가중치
float _CohesionWeight;  // 結合適用時の重み 결합 가중치

float4 _WallCenter;      // 壁の中心座標 벽 중심
float4 _WallSize;        // 壁のサイズ 벽 크기
float  _AvoidWallWeight; // 壁を避ける強さの重み 벽 회피 가중치


// ベクトルの大きさを制限する 벡터 크기 제한
float3 limit(float3 vec, float max)
{
	float length = sqrt(dot(vec, vec)); // 大きさ 크기
	return (length > max && length > 0) ? vec.xyz * (max / length) : vec.xyz;
}

// 壁に当たった時に逆向きの力を返す 벽에 닿았을 때 반대 방향의 힘 반환
float3 avoidWall(float3 position)
{
	float3 wc = _WallCenter.xyz;
	float3 ws = _WallSize.xyz;
	float3 acc = float3(0, 0, 0);
	// x
	acc.x = (position.x < wc.x - ws.x * 0.5) ? acc.x + 1.0 : acc.x;
	acc.x = (position.x > wc.x + ws.x * 0.5) ? acc.x - 1.0 : acc.x;
	
	// y
	acc.y = (position.y < wc.y - ws.y * 0.5) ? acc.y + 1.0 : acc.y;
	acc.y = (position.y > wc.y + ws.y * 0.5) ? acc.y - 1.0 : acc.y;
	
	// z
	acc.z = (position.z < wc.z - ws.z * 0.5) ? acc.z + 1.0 : acc.z;
	acc.z = (position.z > wc.z + ws.z * 0.5) ? acc.z - 1.0 : acc.z;

	return acc;
}

// シェアードメモリ Boidデータ格納用 Boid 데이터 저장용 공유 메모리
groupshared BoidData boid_data[SIMULATION_BLOCK_SIZE];

// 操舵力の計算用カーネル関数 조향 능력 계산용 커널 함수
[numthreads(SIMULATION_BLOCK_SIZE, 1, 1)]
void ForceCS
(
	uint3 DTid : SV_DispatchThreadID, // スレッド全体で固有のID
	uint3 Gid : SV_GroupID,           // グループのID
	uint3 GTid : SV_GroupThreadID,    // グループ内のスレッドID
	uint  GI : SV_GroupIndex          // SV_GroupThreadIDを一次元にしたもの 0-255
)
{
	const unsigned int P_ID = DTid.x; // 自身のID
	float3 P_position = _BoidDataBufferRead[P_ID].position; // 自身の位置 자신의 위치
	float3 P_velocity = _BoidDataBufferRead[P_ID].velocity; // 自身の速度 자신의 속도

	float3 force = float3(0, 0, 0); // 操舵力を初期化 조향 능력 초기화

	float3 sepPosSum = float3(0, 0, 0); // 分離計算用 位置加算変数
	int sepCount = 0; // 分離のために計算した他の個体の数のカウント用変数

	float3 aliVelSum = float3(0, 0, 0); // 整列計算用 速度加算変数
	int aliCount = 0; // 整列のために計算した他の個体の数のカウント用変数

	float3 cohPosSum = float3(0, 0, 0); // 結合計算用 位置加算変数
	int cohCount = 0; // 結合のために計算した他の個体の数のカウント用変数

	// SIMULATION_BLOCK_SIZE（グループスレッド数）ごとの実行 (グループ数分実行)
	// (그룹 스레드 수)별 실행(그룹 수 만큼 실행)
	[loop]
	for (uint N_block_ID = 0; N_block_ID < (uint)_MaxBoidObjectNum;
		N_block_ID += SIMULATION_BLOCK_SIZE)
	{
		// SIMULATION_BLOCK_SIZE分のBoidデータを、シェアードメモリに格納
		// SIMULATION_BLOCK_SIZE만큼의 Boid 데이터를 쉐어드 메모리로 로드
		boid_data[GI] = _BoidDataBufferRead[N_block_ID + GI];

		// すべてのグループ共有アクセスが完了し、
		// グループ内のすべてのスレッドがこの呼び出しに到達するまで、
		// グループ内のすべてのスレッドの実行をブロックする
		// 그룹 내의 모든 스레드의 작업이 끝날 때까지 그룹 내의 모든 스레드 대기
		GroupMemoryBarrierWithGroupSync();

		// 他の個体との計算
		for (int N_tile_ID = 0; N_tile_ID < SIMULATION_BLOCK_SIZE; N_tile_ID++)
		{
			float3 N_position = boid_data[N_tile_ID].position; // 他の個体の位置
			float3 N_velocity = boid_data[N_tile_ID].velocity; // 他の個体の速度

			float3 diff = P_position - N_position; // 自身と他の個体の位置の差
			float  dist = sqrt(dot(diff, diff));   // 自身と他の個体の位置の距離

			// --- 分離（Separation） ---
			if (dist > 0.0 && dist <= _SeparateNeighborhoodRadius)
			{
				// 他の個体の位置から自身へ向かうベクトル
				float3 repulse = normalize(P_position - N_position);
				// 自身と他の個体の位置の距離で割る（距離が遠ければ影響を小さく）
				repulse /= dist;
				sepPosSum += repulse; // 加算
				sepCount++;           // 個体数カウント
			}

			// --- 整列（Alignment） ---
			if (dist > 0.0 && dist <= _AlignmentNeighborhoodRadius)
			{
				aliVelSum += N_velocity; // 加算
				aliCount++;              // 個体数カウント
			}

			// --- 結合（Cohesion） ---
			if (dist > 0.0 && dist <= _CohesionNeighborhoodRadius)
			{
				cohPosSum += N_position; // 加算
				cohCount++;              // 個体数カウント 
			}
		}
		GroupMemoryBarrierWithGroupSync();
	}

	// 操舵力（分離）조향력 (회피)
	float3 sepSteer = (float3)0.0;
	if (sepCount > 0)
	{
		sepSteer = sepPosSum / (float)sepCount;     // 平均を求める
		sepSteer = normalize(sepSteer) * _MaxSpeed; // 最大速度に調整
		sepSteer = sepSteer - P_velocity;           // 操舵力を計算
		sepSteer = limit(sepSteer, _MaxSteerForce); // 操舵力を制限
	}

	// 操舵力（整列） 조향력 (정렬)
	float3 aliSteer = (float3)0.0;
	if (aliCount > 0)
	{
		aliSteer = aliVelSum / (float)aliCount;     // 近い個体の速度の平均を求める
		aliSteer = normalize(aliSteer) * _MaxSpeed; // 最大速度に調整
		aliSteer = aliSteer - P_velocity;           // 操舵力を計算
		aliSteer = limit(aliSteer, _MaxSteerForce); // 操舵力を制限
	}
	// 操舵力（結合） 조향력 (응집)
	float3 cohSteer = (float3)0.0;
	if (cohCount > 0)
	{
		cohPosSum = cohPosSum / (float)cohCount;    // 近い個体の位置の平均を求める
		cohSteer = cohPosSum - P_position;      // 平均位置方向へのベクトルを求める
		cohSteer = normalize(cohSteer) * _MaxSpeed; // 最大速度に調整
		cohSteer = cohSteer - P_velocity;           // 操舵力を計算
		cohSteer = limit(cohSteer, _MaxSteerForce); // 操舵力を制限
	}
	force += aliSteer * _AlignmentWeight; // 操舵力に整列する力を加える
	force += cohSteer * _CohesionWeight;  // 操舵力に結合する力を加える
	force += sepSteer * _SeparateWeight;  // 操舵力に分離する力を加える

	_BoidForceBufferWrite[P_ID] = force; // 書き込み
}

// 速度, 位置計算用カーネル関数 속도, 위치 계산을 위한 커널 함수
[numthreads(SIMULATION_BLOCK_SIZE, 1, 1)]
void IntegrateCS
(
	uint3 DTid : SV_DispatchThreadID // スレッド全体で固有のID
)
{
	const unsigned int P_ID = DTid.x;          // インデックスを取得
											           
	BoidData b = _BoidDataBufferWrite[P_ID];   // 現在のBoidデータを読み込む 현재 Boid 데이터 읽기
	float3 force = _BoidForceBufferRead[P_ID]; // 操舵力を読み込む 조향력을 읽기
	
	// 壁に近づいたら反発する力を与える
	// 벽에 가까워지면 반발하는 힘 부여
	force += avoidWall(b.position) * _AvoidWallWeight; 

	b.velocity += force * _DeltaTime;          // 操舵力を速度に適用 조향력을 속도에 적용
	b.velocity = limit(b.velocity, _MaxSpeed); // 速度を制限 속도 제한
	b.position += b.velocity * _DeltaTime;     // 位置を更新 위치 업데이트
											           
	_BoidDataBufferWrite[P_ID] = b;            // 計算結果を書き込む 계산결과 쓰기
}